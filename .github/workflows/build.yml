name: CRuby Dev Builds
on:
  workflow_dispatch:
  push:
    tags:
    - '*'
  schedule:
  - cron: '0 19 * * *'
jobs:
  prepare:
    name: Check if the latest ruby commit is already built
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_commit.outputs.result }}
      commit: ${{ steps.latest_commit.outputs.commit }}
    steps:
    - name: Clone ruby
      uses: actions/checkout@v4
      with:
        repository: ruby/ruby
        path: ruby
    - name: Set latest_commit
      id: latest_commit
      working-directory: ruby
      run: echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Check if latest commit already built
      uses: actions/github-script@v7
      id: check_commit
      with:
        script: |
          const latestDevCommit = "${{ steps.latest_commit.outputs.commit }}"
          const { owner, repo } = context.repo
          let { data: release } = await github.rest.repos.getLatestRelease({ owner, repo })
          const latestReleaseCommit = release.body.split('@')[1]
          console.log(`Latest release commit: ${latestReleaseCommit}`)
          console.log(`Latest ruby commit: ${latestDevCommit}`)
          if (latestReleaseCommit === latestDevCommit) {
            return 'false'
          } else {
            return 'true'
          }
        result-encoding: string

  release:
    name: Create GitHub Release
    needs: [prepare]
    if: needs.prepare.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
      if: github.event_name != 'push'

    - name: Set tag name
      id: tag
      run: |
        if [[ "${{ github.event_name }}" != "push" ]]; then
          tag=v$(date +%Y%m%d.%H%M%S)
        else
          tag=$(basename "${{ github.ref }}")
        fi
        echo "tag=$tag" >> $GITHUB_OUTPUT
    - name: Create Release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: |
        tag="${{ steps.tag.outputs.tag }}"
        body="ruby/ruby@${{ needs.prepare.outputs.commit }}"
        gh release create --draft "$tag" --title "$tag" --notes "$body"

  build:
    needs: [prepare, release]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-22.04, ubuntu-24.04 ]
        # os: [ ubuntu-20.04, ubuntu-22.04, ubuntu-24.04, macos-11, macos-arm-oss ]
        name: [ head, debug ]
        include:
          - os: ubuntu-22.04
            name: asan
    runs-on: ${{ matrix.os }}
    steps:
    - name: Clone ruby
      uses: actions/checkout@v4
      with:
        repository: ruby/ruby
        ref: ${{ needs.prepare.outputs.commit }}

    - name: Set platform
      id: platform
      run: |
        platform=${{ matrix.os }}
        platform=${platform/macos-11/macos-latest}
        platform=${platform/macos-arm-oss/macos-13-arm64}
        echo "platform=$platform" >> $GITHUB_OUTPUT
        # Prefix where the installed ruby will eventually go (this gets tar'd up to be distributed)
        echo "RUBY_PREFIX=$HOME/.rubies/ruby-${{ matrix.name }}" >> $GITHUB_ENV

    # Build
    - name: apt-get update on Ubuntu
      run: sudo apt-get update
      if: startsWith(matrix.os, 'ubuntu')
    - run: sudo apt-get install -y --no-install-recommends ruby bison libyaml-dev libgdbm-dev libreadline-dev libncurses5-dev patch
      if: startsWith(matrix.os, 'ubuntu')
    - run: brew install autoconf automake bison
      if: startsWith(matrix.os, 'macos')
    - run: echo "PATH=/usr/local/opt/bison/bin:$PATH" >> $GITHUB_ENV
      if: startsWith(matrix.os, 'macos')
    - name: Disable Firewall # Needed for TestSocket#test_udp_server in test-all
      if: startsWith(matrix.os, 'macos')
      run: |
        sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off
        sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate

    # Check
    - name: Setup BASERUBY
      uses: ruby/setup-ruby@master
      with:
        ruby-version: 3.2

    - run: chmod 755 $HOME # https://github.com/actions/virtual-environments/issues/267
    - run: mkdir -p ~/.rubies

    # ENABLE_PATH_CHECK=0: https://github.com/actions/virtual-environments/issues/267
    - name: Set configure flags (head)
      run: |
        echo "cppflags=-DENABLE_PATH_CHECK=0" >> $GITHUB_ENV
      if: matrix.name == 'head'
    - name: Set configure flags (debug)
      run: |
        echo "cppflags=-DENABLE_PATH_CHECK=0 -DRUBY_DEBUG=1" >> $GITHUB_ENV
        echo "optflags=-O3 -fno-inline" >> $GITHUB_ENV
      if: matrix.name == 'debug'

    - name: Install Clang 18
      run: |
        set -ex;
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        sudo add-apt-repository -y 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main'
        sudo apt update -y
        sudo apt install -y clang-18
      if: matrix.name == 'asan'
    - name: Set global configure flags (asan)
      run: |
        # These flags get applied to both the Ruby compilation _and_ the compilation of dependencies
        # wiht ASAN enabled
        echo "optflags=-O3 -fno-inline -fno-omit-frame-pointer" >> $GITHUB_ENV
        # Compile with ASAN
        echo "debugflags=-fsanitize=address -ggdb3 -fPIC" >> $GITHUB_ENV
        # Requires clang 18
        echo "CC=clang-18" >> $GITHUB_ENV
      if: matrix.name == 'asan'
    - name: Build ASAN dependencies (asan)
      run: |
        set -ex
        # Where we're going to store ASAN static archives (these need to be distributed, since the LDFLAGS
        # we need to use to link Ruby against them get burned into the resulting rbconfig)
        mkdir -p "$RUBY_PREFIX/asan"
        mkdir asan_build
        pushd asan_build

        OPENSSL_VERSION="3.3.0"
        LIBYAML_VERSION="0.2.5"

        # Make sure we compile OpenSSL to look for certificates in the same place that the
        # distribution provided OpenSSl would.
        OPENSSLDIR="$(openssl version -d | ruby -rshellwords -ne 'if $_ =~ /OPENSSLDIR:(.*)$/; puts Shellwords.shellsplit($1.strip); end')"

        curl -fsSLO "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz"
        tar xf "openssl-${OPENSSL_VERSION}.tar.gz"
        pushd "openssl-${OPENSSL_VERSION}"
        ./Configure --prefix="$RUBY_PREFIX/asan" --libdir=lib --openssldir="$OPENSSLDIR" no-shared no-tests no-apps CC="$CC" CFLAGS="$optflags $debugflags"
        make -j4
        # make install_sw will try and write config to OPENSSLDIR, which we don't want to do.
        mkdir -p "$RUBY_PREFIX/asan/lib"
        cp libcrypto.a libssl.a "$RUBY_PREFIX/asan/lib"
        popd

        curl -fsSLO "http://pyyaml.org/download/libyaml/yaml-${LIBYAML_VERSION}.tar.gz"
        tar xf "yaml-${LIBYAML_VERSION}.tar.gz"
        pushd "yaml-${LIBYAML_VERSION}"
        ./configure --prefix="$RUBY_PREFIX/asan" --disable-shared --enable-static CC="$CC" CFLAGS="$optflags $debugflags"
        make -j4
        make install
        popd

        popd
        rm -Rf asan_build
      if: matrix.name == 'asan'
    - name: Set Ruby configure flags (asan)
      run: |
        # These flags get applied only to the Ruby build, not to the libs.
        # Clang > 17 does not work with M:N threading: https://bugs.ruby-lang.org/issues/20243
        echo "cppflags=-DENABLE_PATH_CHECK=0 -DRUBY_DEBUG=1 -DVM_CHECK_MODE=1 -DUSE_MN_THREADS=0" >> $GITHUB_ENV
        # And statically link against our ASAN-compiled libraries
        echo "LDFLAGS=-L${RUBY_PREFIX}/asan/lib -Wl,-Bstatic -lcrypto -lssl -lyaml -Wl,-Bdynamic" >> $GITHUB_ENV
        echo "cflags=-I${RUBY_PREFIX}/asan/include" >> $GITHUB_ENV

        # Make the test timeouts more generous too (ASAN is slower)
        echo "RUBY_TEST_TIMEOUT_SCALE=5" >> $GITHUB_ENV
        echo "SYNTAX_SUGGEST_TIMEOUT=600" >> $GITHUB_ENV
      if: matrix.name == 'asan'

    # Build
    - run: ./autogen.sh
    - run: ./configure --prefix="$RUBY_PREFIX" --enable-shared --disable-install-doc --enable-yjit
      if: startsWith(matrix.os, 'ubuntu')
    - run: ./configure --prefix="$RUBY_PREFIX" --enable-shared --disable-install-doc --enable-yjit --with-openssl-dir=$(brew --prefix openssl@1.1) --with-readline-dir=$(brew --prefix readline)
      if: startsWith(matrix.os, 'macos')
    - run: make -j4
    - run: make install

    - name: Create archive
      run: tar czf ruby-${{ matrix.name }}-${{ steps.platform.outputs.platform }}.tar.gz -C ~/.rubies ruby-${{ matrix.name }}

    # Test
    - run: make test-spec MSPECOPT=-j
    - run: make test-all TESTS="-j4"

    - run: echo "$HOME/.rubies/ruby-${{ matrix.name }}/bin" >> $GITHUB_PATH
    - uses: actions/checkout@v4
      with:
        path: test_files
    - name: CLI Test
      run: ruby test_files/cli_test.rb
    - run: mv test_files/Gemfile .
    - run: ruby -e 'pp RbConfig::CONFIG'
    - run: ruby --yjit -e 'exit RubyVM::YJIT.enabled?'
    - run: ruby -ropen-uri -e 'puts URI.send(:open, "https://rubygems.org/") { |f| f.read(1024) }'
    - run: gem install json:2.2.0 --no-document
    - run: bundle install
    - run: bundle exec rake --version
    - name: Subprocess test
      run: ruby -e 'p RbConfig::CONFIG["cppflags"]; def Warning.warn(s); raise s; end; system RbConfig.ruby, "-e", "p :OK"'

    - name: Upload Built Ruby
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: gh release upload "${{ needs.release.outputs.tag }}" "ruby-${{ matrix.name }}-${{ steps.platform.outputs.platform }}.tar.gz"

  publish:
    name: Publish Release
    needs: [release, build]
    runs-on: ubuntu-latest
    steps:
    - name: Publish Release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: gh release edit "${{ needs.release.outputs.tag }}" --draft=false
    - uses: eregon/keep-last-n-releases@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        n: 3
        remove_tags_without_release: true
